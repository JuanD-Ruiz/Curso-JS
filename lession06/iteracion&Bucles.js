/*
Iteraciones y bucles

While
do while
for

*/

console.log("While")

/*

üß† Reto: Adivina el n√∫mero secreto
üü¢ Descripci√≥n:
Crea un programa que:

Genere un n√∫mero aleatorio entre 1 y 10 (ese ser√° el n√∫mero secreto).

Use un bucle while para que el usuario intente adivinarlo.

El programa debe:

Pedirle al usuario un n√∫mero (usa prompt para simularlo).

Mostrar si el n√∫mero es correcto o no.

Saltar la vuelta si el n√∫mero ingresado es 0 usando continue (como si no contara).

Terminar si el usuario adivina correctamente usando break.

üß© Reglas:
Usa Math.random() para generar el n√∫mero.

Usa prompt() para obtener el n√∫mero del usuario. (Si est√°s en un entorno sin navegador, puedes usar un array simulado de intentos para probarlo).

Muestra mensajes con console.log().

*/
let numeroSecreto = Math.floor(Math.random() * 10) + 1;
let intento;
let contador = 0;

while (true) {
  intento = prompt("Adivina el n√∫mero (1-10):");
  intento = Number(intento);

  if (intento === 0) {
    console.log("Entrada no v√°lida, intenta de nuevo.");
    continue;
  }

  contador++; // Aumentamos el contador solo si el intento es v√°lido (distinto de 0)

  if (intento === numeroSecreto) {
    console.log(`¬°Adivinaste! El n√∫mero secreto era ${numeroSecreto}.`);
    console.log(`Lo lograste en ${contador} intento(s).`);
    break;
  }

  console.log("N√∫mero incorrecto, intenta de nuevo.");
}

/* 

DO WHILE

üß© Reto para ti
Haz un programa con do...while que:

Pida al usuario que escriba una contrase√±a (puedes simular esto con prompt si est√°s en navegador).

El ciclo debe repetirse hasta que el usuario escriba la contrase√±a correcta: "js123".

Cuando la contrase√±a sea correcta, debe mostrar un mensaje como: "¬°Acceso concedido!".

*/
let contrase√±a;

do {
  contrase√±a = prompt("Ingresa tu contrase√±a");
} while (contrase√±a !== 'jquery');

console.log("¬°Acceso concedido!")

/* 

üîê Reto 2: Contrase√±a con intentos limitados
Haz un programa con do...while que:

Pida al usuario que escriba una contrase√±a (correcta = 'javascript123').

El usuario solo tendr√° 3 intentos para adivinarla.

Si la escribe bien antes de los 3 intentos, muestra "¬°Acceso concedido!".

Si falla las 3 veces, muestra "Acceso denegado. Demasiados intentos.".

*/

let entrada;
let contador1 = 0;

do {
  entrada = prompt("Ingresa la contrase√±a correcta");
  contador1++;

} while (entrada !== "Pescado" && contador1 < 3);
if (entrada === "Pescado"){
  console.log("¬°Acceso concedido!")
} else {
  console.log("Acceso denegado. Demasiados intentos.")
}

/*

For

üéØ Reto

Reto b√°sico:
Crea un bucle for que imprima los n√∫meros del 1 al 10.

Reto intermedio:
Tienes el siguiente array:


Escribe un bucle for que imprima:

Fruta #1: manzana
Fruta #2: banana
Fruta #3: cereza
Fruta #4: kiwi

*/

for (let i = 0; i < 10; i++){
  console.log(i+1)
}

var frutas = ["manzana", "banana", "cereza", "kiwi"];

for (let index = 0; index < frutas.length; index++) {

  console.log(`Fruta #${index+1}: ${frutas[index]}`);
  
}

/*

for...of, for...in, forEach

üîÅ Reto 1: for...of
üß© Enunciado:
Tienes el siguiente array de nombres:

const nombres = ["Carlos", "Ana", "Luis", "Marta", "Jorge"];
üëâ Crea un bucle for...of que recorra este array e imprima un mensaje como:

Hola, Carlos!
Hola, Ana!
...

*/
const nombres = ["Carlos", "Ana", "Luis", "Marta", "Jorge"];
for(const nombre of nombres ){
  console.log(`Hola, ${nombre}!`);
}
/*
üîÅ Reto 2: for...in
üß© Enunciado:
Tienes el siguiente objeto:


const persona = {
  nombre: "Laura",
  edad: 30,
  profesion: "Dise√±adora"
};
üëâ Usa un bucle for...in para recorrer las propiedades del objeto y mostrar esto en consola:

nombre: Laura
edad: 30
profesion: Dise√±adora
Bonus: Usa Object.hasOwn() para asegurarte de que solo imprimes propiedades propias.
*/

const persona = {
  nombre: "Laura",
  edad: 30,
  profesion: "Dise√±adora"
};

for(dato in persona){
  console.log(`${dato}: ${persona[dato]}`);
}

/*
üîÅ Reto 3: forEach()
üß© Enunciado:
Tienes un array de precios:

const precios = [10, 20, 30, 40];
üëâ Usa forEach() para:

Mostrar cada precio en consola.

Calcular el total de la suma de todos los precios.

Mostrar el total al final.

üìå Salida esperada:

Precio: 10
Precio: 20
Precio: 30
Precio: 40
Total: 100

*/

const precios = [10, 20, 30, 40];
let total = 0;

precios.forEach((precio) => {
  console.log(`Pecio: ${precio}`);
  total += precio;
});

console.log(`Total: ${total}`);

/*

Iteradores

üéØ Reto: Crear un iterable personalizado para n√∫meros impares del 1 al 9
Crea un objeto iterable (no una funci√≥n generadora) que devuelva los n√∫meros impares del 1 al 9 cuando se recorra con un bucle for...of.

‚úÖ Requisitos:
Implementa el m√©todo [Symbol.iterator]() en un objeto llamado numImpares.

Dentro del m√©todo, crea un objeto iterador con la funci√≥n next().

El m√©todo next() debe:

Devolver los n√∫meros impares desde 1 hasta 9.

Indicar que ha terminado cuando el n√∫mero supere el 9.

Recorre el iterable usando un bucle for...of y muestra cada valor en consola.

*/

const numImpares = {
  [Symbol.iterator](){
    let count = 1;
    return{
      next(){
        if (count < 10){
          const value = count;
          count += 2;
          return { value, done: false}
        } else {
          return {done: true}
        }
      }
    }
  }
}

for (const impar of numImpares){
  console.log(impar);
}

/*

JavaScript asincrono

Promesas

üß† Reto: Simulador de consultas a servidores
Imagina que tienes que hacer una consulta a varios servidores (API ficticias) para obtener datos.
Algunos responden r√°pido, otros lento, y alguno puede fallar.

üéØ Objetivo:
Simula 5 servidores que responden en diferentes tiempos (1s a 4s).

Algunos deben responder con datos, otros con error (simulado).

Usa Promise.race() para mostrar el primer servidor que respondi√≥, sin importar si fue √©xito o error.

Luego usa Promise.any() para mostrar el primer servidor exitoso.

Al final, usa Promise.allSettled() para mostrar el resultado de todos los servidores.

*/

function consultaServidor(nombre, tiempo, exito){
  return new Promise((consulta, reject) => {
    console.log(`${nombre} se esta analizando...`);
    
    setTimeout(() => {
      if(exito){
        consulta(`${nombre}: primer servidor que se obtuvo datos de forma exitosa`)
      } else {
        reject(`${nombre}: primer servidor en conectar, sin encontrar datos`)
      }
    }, tiempo);
  });

}
const servidores = [
  consultaServidor("Servidor A", 4000, true),
  consultaServidor("Servidor B", 2000, false),  
  consultaServidor("Servidor C", 3000, true),   
  consultaServidor("Servidor D", 1000, false),  
  consultaServidor("Servidor E", 2500, true),   
]

async function promiseRace(){

  try {
    const resultado = await Promise.race(servidores);
    console.log(` Resultado (race): ${resultado}`);
  } catch (error) {
    console.error(`Primer error (race): ${error}`);
  }
}

async function promiseAny() {
  try {
    const resultado = await Promise.any(servidores);
    console.log(`Resultado (any): ${resultado}`)
  } catch (error) {
    console.error(`Primer error (any): ${error}`)
  }
  
}

async function promiseAllSettled() {
  const resultado = await Promise.allSettled(servidores);
  resultado.forEach((resultado, i) => {
    if (resultado.status == "fulfilled"){
      console.log(`Exito: ${resultado.value}`);
    } else {
      console.warn(`Fallo: ${resultado.reason}`);
    }
  });
}

await promiseRace();
await promiseAny();
await promiseAllSettled();